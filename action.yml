name: 'Workflow Concurrency Validator'
description: 'Validates that GitHub Actions workflow concurrency does not exceed specified limits'
author: 'Oscar Romero'

inputs:
  max-concurrency:
    description: 'Maximum allowed concurrency across all workflows'
    required: false
    default: '10'
  workflow-path:
    description: 'Path to the workflows directory'
    required: false
    default: '.github/workflows'
  fail-on-error:
    description: 'Whether to fail the action if validation fails'
    required: false
    default: 'true'
  comment-on-pr:
    description: 'Whether to comment on PR if validation fails'
    required: false
    default: 'true'
  token:
    description: 'GitHub token for commenting on PRs'
    required: false
    default: ${{ github.token }}

permissions:
  pull-requests: write
  contents: read

outputs:
  total-concurrency:
    description: 'Total concurrency detected across workflows'
    value: ${{ steps.validate.outputs.total_concurrency }}
  validation-passed:
    description: 'Whether validation passed'
    value: ${{ steps.validate.outputs.validation_passed }}
  validation-result:
    description: 'Detailed validation result including issues'
    value: ${{ steps.validate.outputs.validation_result }}
  issues:
    description: 'Issues found during validation'
    value: ${{ steps.validate.outputs.issues }}

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
      
    - name: Validate workflow concurrency
      id: validate
      run: node ${{ github.action_path }}/dist/index.js
      shell: bash
      env:
        INPUT_MAX_CONCURRENCY: ${{ inputs.max-concurrency }}
        INPUT_WORKFLOW_PATH: ${{ inputs.workflow-path }}
        INPUT_FAIL_ON_ERROR: ${{ inputs.fail-on-error }}
        INPUT_COMMENT_ON_PR: ${{ inputs.comment-on-pr }}
        GITHUB_WORKSPACE: ${{ github.workspace }}
        GITHUB_TOKEN: ${{ inputs.token }}
        GITHUB_EVENT_NAME: ${{ github.event_name }}

    - name: Debug PR comment conditions
      if: always()
      shell: bash
      run: |
        echo "Debug PR comment conditions:"
        echo "comment-on-pr input: ${{ inputs.comment-on-pr }}"
        echo "INPUT_COMMENT_ON_PR env: $INPUT_COMMENT_ON_PR"
        echo "validation_passed: ${{ steps.validate.outputs.validation_passed }}"
        echo "github.event_name: ${{ github.event_name }}"
        if [ -f "$GITHUB_OUTPUT" ]; then
          echo "Contents of GITHUB_OUTPUT:"
          cat "$GITHUB_OUTPUT"
        else
          echo "No GITHUB_OUTPUT file found"
        fi
        
    - name: Comment on PR if validation fails
      if: ${{ always() && inputs.comment-on-pr == 'true' && steps.validate.outputs.validation_passed == 'false' && github.event_name == 'pull_request' }}
      uses: actions/github-script@v6
      with:
        github-token: ${{ inputs.token }}
        script: |
          try {
            console.log('Starting PR comment creation...');
            const validationResult = JSON.parse('${{ steps.validate.outputs.validation_result }}');
            console.log('Validation result:', validationResult);
            
            let body = '❌ Workflow Concurrency Validation Failed!\n\n';
            body += `Found ${validationResult.issues.length} workflows with concurrency issues (maximum allowed: ${validationResult.max}).\n\n`;
            
            if (validationResult.issues && validationResult.issues.length > 0) {
              body += 'Issues found:\n';
              validationResult.issues.forEach(issue => {
                body += `- ${issue}\n`;
              });
            }
            
            console.log('Attempting to create comment with body:', body);
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
            
            console.log('Successfully posted comment on PR');
          } catch (error) {
            console.log('Error details:', error);
            throw error;
          }
